#!/usr/bin/env python
import re
import sys
import getopt

def usage():
	usage_info = [
		("-h", "Display this help page"),
		("-X", "Enable parallel mode"),
		("-c", "The command to send to redis instance"),
		("-p", "Output the result as 'hostport: result'"),
		("-f", "Output with formatting"),
	]
	format_info = [
		("host",     "The hostname we sent the request to"),
		("port",     "The port we sent the request to"),
		("hostport", "A concatenation of host:port"),
		("reply",    "The reply to your request"),
	]
	print "Usage:"
	print "\t%s [options] hostlist" % (sys.argv[0])
	print
	print "Options:"
	for entry in usage_info:
		print "\t%-8s %s" % (entry[0], entry[1])
	print
	print "Notes:"
	print "\thostlist is a list of hostname:port separated by space"
	print
	print "Formatting:"
	print "\tA format specifier looks like %{thing}"
	print "\tThe following specifiers are always available:"
	for entry in format_info:
		print "\t\t%-16s: %s" % (entry[0], entry[1])
	print
	print "\tYou can also use any specifier that matches a key from the",
	print "info command"
	print
	print "Examples:"
	print "\t%s -c 'SET mykey Hello' -p localhost:6379" % (sys.argv[0])
	print "\t%s -c 'GET mykey' -p localhost:6379" % (sys.argv[0])
	print "\t%s -c info -f '%%{uptime_in_seconds}' localhost:{6379..6400}" % \
	      (sys.argv[0])
	print "\t%s -c info -f '%%{hostport}: %%{role}' localhost:{6379..6400}" % \
	      (sys.argv[0])

def main():
	options  = 'hXpc:f:'
	commands = 0
	parallel = False
	hosts = []
	host_re = re.compile('^[A-Za-z0-9.-]+:[0-9]+$')

	# first pass, find/process global options
	try:
		opts, args = getopt.getopt(sys.argv[1:], options)
	except getopt.GetoptError as e:
		usage()
		sys.exit(1)
	for o, a in opts:
		# we're not dealing w/ prints yet
		if o in ('-p', '-f'):
			continue
		# for commands, just count them to decide on optimizations
		if o == '-c':
			commands += 1
		if o == '-h':
			usage()
			sys.exit()
		if o == '-X':
			parallel = True

	# next, let's put together a list of hosts
	for host in args:
		if host_re.match(host):
			hosts.append(host)
		else:
			print "[%s] is not in the form of <host>:<port>" % (host)

	# make sure we have at least one host to work on
	if len(hosts) < 1:
		print "No hosts specified"
		sys.exit(1)

	# TODO: handle pre-connections here

	# run the commands on each host
	for host in hosts:
		for o, a in opts:
			# these were already dealt with
			if o in ('-h', '-X'):
				continue
			if o == '-c':
				

if __name__ == "__main__":
	main()
